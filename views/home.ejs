<!DOCTYPE html>
<html>

<head>
    <style>
        .button {
            border: none;
            width: 100px;
            height: 50px;
            padding: 15px 32px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
        }

        .display_button {
            border: none;
            width: 300px;
            height: 50px;
            padding: 15px 32px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
        }

        .div {
            border: 1px solid black;
            background-color: lightblue;
            padding-top: 50px;
            padding-right: 15%;
            padding-bottom: 50px;
            padding-left: 15%;
        }
    </style>
    <meta charset="utf-8">
    <title>NewMech IoT Controller</title>
    <script type="text/javascript" src="canvasjs.min.js"></script>
    <script src="jquery-3.1.1.min.js"></script>
    <script type="text/javascript" src="smoothie.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        var receiver;
        var data = {};
        $(document).ready(() => {
            var socket = io();
            socket.on('pin13_state', data => {
                var state = data;
                $('#pin13').text(state);
                if (state == "ON") {
                    $('#pin13').css("background-color", "#4CAF50");
                    $('#pin13').css("color", "white");
                } else {
                    $('#pin13').css("background-color", "#e7e7e7");
                    $('#pin13').css("color", "black");
                }
            });
            $('#pin13').click(() => {
                var msg = "Button Pressed!"
                socket.emit('pin13_change', msg);
            })

            socket.on('sensor_data', packet => {
                data.tempVal = packet.temp;
                data.hmdtVal = packet.humid;
                $('#tempButton').text(data.tempVal);
                $('#tempButton').css("background-color", "#4CAF50");
                $('#tempButton').css("color", "white");
                $('#humidButton').text(data.hmdtVal);
                $('#humidButton').css("background-color", "#4CAF50");
                $('#humidButton').css("color", "white");
            })
        });
        window.onload = function() {
            //Tempchart
            var tempDps = []; // dataPoints
            var tempChart = new CanvasJS.Chart("Tempchart", {
                title: {
                    text: "Temperature Data"
                },
                data: [{
                    type: "line",
                    dataPoints: tempDps
                }]
            });
            var tempX = new Date();
            var tempY = 100;
            var updateInterval = 5000; //update time
            var dataLength = 500; // number of dataPoints visible at any point
            var updateTempChart = function(count) {
                count = count || 1;
                // count is number of times loop runs to generate random dataPoints.
                tempY = 100;
                for (var j = 0; j < count; j++) {
                    tempY = data.tempVal;
                    tempX = new Date();
                    tempDps.push({
                        x: tempX,
                        y: tempY
                    });
                    tempX++;
                };
                if (tempDps.length > dataLength) {
                    tempDps.shift();
                }
                tempChart.render();
            };
            // generates first set of dataPoints
            updateTempChart(dataLength);
            // update chart after specified time.

            //Humidchart
            var hmdtDps = []; // dataPoints
            var hmdtChart = new CanvasJS.Chart("Humidchart", {
                title: {
                    text: "Humidity Data"
                },
                data: [{
                    type: "line",
                    dataPoints: hmdtDps
                }]
            });
            var hmdtX = new Date();
            var hmdtY = 100;
            var updateHmdtChart = function(count) {
                count = count || 1;
                // count is number of times loop runs to generate random dataPoints.
                hmdtY = 100;
                for (var j = 0; j < count; j++) {
                    hmdtY = data.hmdtVal;
                    hmdtX = new Date();
                    hmdtDps.push({
                        x: hmdtX,
                        y: hmdtY
                    });
                    hmdtX++;
                };
                if (hmdtDps.length > dataLength) {
                    hmdtDps.shift();
                }
                hmdtChart.render();
            };
            // generates first set of dataPoints
            updateHmdtChart(dataLength);
            // update chart after specified time.
            setInterval(function() {
                updateTempChart();
                updateHmdtChart();
            }, updateInterval);
        }
    </script>
</head>

<body>
    <h1 style="font-family:verdana">NewMech IoT Controller</h1>
    <div class="div">
        <div id="Tempchart" style="height: 300px; width: 100%;"></div>
        <div id="Humidchart" style="height: 300px; width: 100%;"></div>
    </div>
    <div class="div">
        <button class="display_button">Current Temperature</button>
        <button class="button" id="tempButton"></button>
        <br>
        <button class="display_button">Current Humidity</button>
        <button class="button" id="humidButton"></button>
        <button class="button" id="pin13"></button>

    </div>


</body>

</html>
